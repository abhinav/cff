{{- define "panicError" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{ template "stacktrace" }}
err = {{ $cff }}.PanicError{
    Value:      recovered,
    Stacktrace: stacktrace,
}
{{- end -}}

{{- define "stacktrace" -}}
{{- $runtime := import "runtime" -}}
{{ template "funcFormatFunction" }}
{{ template "funcGetStack" }}
pc := make([]uintptr, 64)
{{- /* skipping 2 in the callers, which are: */ -}}
{{- /* - runtime.Callers */ -}}
{{- /* - caller of Callers (self) */ -}}
{{- /* because the panic should not be in any of these callers */}}
n := {{ $runtime }}.Callers(2, pc)
stacktrace := "[frames]:\n"
if n != 0 {
    pc = pc[:n]
    frames := {{ $runtime }}.CallersFrames(pc)
    stacktrace = getStack(frames)
}
{{- end -}}

{{- define "funcGetStack" -}}
{{- $fmt := import "fmt" -}}
{{- $strings := import "strings" -}}
getStack := func (frames *{{ import "runtime" }}.Frames) string {
    var b {{ $strings }}.Builder
	{{ $fmt }}.Fprintf(&b, "[frames]:\n")
    for {
        frame, more := frames.Next()
        {{ $fmt }}.Fprintf(&b, "%s()\n\t%s:%d\n", formatFunction(frame.Function), frame.File, frame.Line)
        {{- /* Check whether there are more frames to process after this one */ -}}
        if !more {
            break
        }
    }
    return b.String()
}
{{- end -}}

{{- define "funcFormatFunction" -}}
formatFunction := func (funcName string) string {
    if funcName == "runtime.gopanic" {
        return "panic"
    }
    return funcName
}
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
